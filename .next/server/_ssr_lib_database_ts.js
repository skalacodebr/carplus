"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_lib_database_ts";
exports.ids = ["_ssr_lib_database_ts"];
exports.modules = {

/***/ "(ssr)/./lib/asaas.ts":
/*!**********************!*\
  !*** ./lib/asaas.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cancelPayment: () => (/* binding */ cancelPayment),\n/* harmony export */   checkPaymentStatus: () => (/* binding */ checkPaymentStatus),\n/* harmony export */   createOrUpdateCustomer: () => (/* binding */ createOrUpdateCustomer),\n/* harmony export */   createPayment: () => (/* binding */ createPayment),\n/* harmony export */   formatCep: () => (/* binding */ formatCep),\n/* harmony export */   formatCpfCnpj: () => (/* binding */ formatCpfCnpj),\n/* harmony export */   formatPhone: () => (/* binding */ formatPhone),\n/* harmony export */   getPaymentLink: () => (/* binding */ getPaymentLink),\n/* harmony export */   getPixQrCode: () => (/* binding */ getPixQrCode)\n/* harmony export */ });\n// Biblioteca para integração com o Asaas\n// Tipos para a API do Asaas\n// Função para fazer requisições à API do Asaas\nasync function asaasRequest(endpoint, method = \"POST\", data) {\n    try {\n        const response = await fetch(\"/api/asaas/proxy\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                endpoint,\n                method,\n                data\n            })\n        });\n        const responseData = await response.json();\n        return responseData;\n    } catch (error) {\n        console.error(\"Erro na requisição Asaas:\", error);\n        return {\n            error: true,\n            message: error.message\n        };\n    }\n}\n// Funções para interagir com a API do Asaas\n// Criar ou atualizar cliente\nasync function createOrUpdateCustomer(customerData) {\n    // Verificar se o cliente já existe pelo CPF/CNPJ\n    try {\n        console.log(\"Verificando cliente no Asaas:\", customerData);\n        const searchResult = await asaasRequest(`/customers?cpfCnpj=${customerData.cpfCnpj}`);\n        if (searchResult.data && searchResult.data.length > 0) {\n            // Cliente já existe, atualizar\n            const existingCustomer = searchResult.data[0];\n            console.log(\"Cliente encontrado:\", existingCustomer);\n            return await asaasRequest(`/customers/${existingCustomer.id}`, \"PUT\", customerData);\n        } else {\n            // Cliente não existe, criar\n            console.log(\"Cliente não encontrado, criando...\");\n            return await asaasRequest(\"/customers\", \"POST\", customerData);\n        }\n    } catch (error) {\n        console.error(\"Erro ao criar/atualizar cliente no Asaas:\", error);\n        throw error;\n    }\n}\n// Criar cobrança\nasync function createPayment(paymentData) {\n    try {\n        return await asaasRequest(\"/payments\", \"POST\", paymentData);\n    } catch (error) {\n        console.error(\"Erro ao criar cobrança no Asaas:\", error);\n        throw error;\n    }\n}\n// Obter QR Code PIX\nasync function getPixQrCode(paymentId) {\n    try {\n        return await asaasRequest(`/payments/${paymentId}/billingInfo`, \"GET\", null);\n    } catch (error) {\n        console.error(\"Erro ao obter QR Code PIX:\", error);\n        throw error;\n    }\n}\n// Obter link de pagamento\nasync function getPaymentLink(paymentId) {\n    try {\n        const payment = await asaasRequest(`/payments/${paymentId}`);\n        return payment.invoiceUrl;\n    } catch (error) {\n        console.error(\"Erro ao obter link de pagamento:\", error);\n        throw error;\n    }\n}\n// Verificar status de pagamento\nasync function checkPaymentStatus(paymentId) {\n    try {\n        const payment = await asaasRequest(`/payments/${paymentId}`);\n        return payment.status;\n    } catch (error) {\n        console.error(\"Erro ao verificar status do pagamento:\", error);\n        throw error;\n    }\n}\n// Cancelar cobrança\nasync function cancelPayment(paymentId) {\n    try {\n        return await asaasRequest(`/payments/${paymentId}/cancel`, \"POST\");\n    } catch (error) {\n        console.error(\"Erro ao cancelar cobrança:\", error);\n        throw error;\n    }\n}\n// Função para formatar CPF/CNPJ (remover caracteres especiais)\nfunction formatCpfCnpj(cpfCnpj) {\n    return cpfCnpj.replace(/[^\\d]/g, \"\");\n}\n// Função para formatar telefone (remover caracteres especiais)\nfunction formatPhone(phone) {\n    return phone.replace(/[^\\d]/g, \"\");\n}\n// Função para formatar CEP (remover caracteres especiais)\nfunction formatCep(cep) {\n    return cep.replace(/[^\\d]/g, \"\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./lib/asaas.ts\n");

/***/ }),

/***/ "(ssr)/./lib/database.ts":
/*!*************************!*\
  !*** ./lib/database.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   adicionarItemCarrinho: () => (/* binding */ adicionarItemCarrinho),\n/* harmony export */   atualizarCarrinhoUsuario: () => (/* binding */ atualizarCarrinhoUsuario),\n/* harmony export */   atualizarQuantidadeCarrinho: () => (/* binding */ atualizarQuantidadeCarrinho),\n/* harmony export */   atualizarStatusPedido: () => (/* binding */ atualizarStatusPedido),\n/* harmony export */   criarPedido: () => (/* binding */ criarPedido),\n/* harmony export */   criarPedidoNovo: () => (/* binding */ criarPedidoNovo),\n/* harmony export */   getAlturasByTamanhoId: () => (/* binding */ getAlturasByTamanhoId),\n/* harmony export */   getCalculos: () => (/* binding */ getCalculos),\n/* harmony export */   getCalculosUsuario: () => (/* binding */ getCalculosUsuario),\n/* harmony export */   getCarrinhoUsuario: () => (/* binding */ getCarrinhoUsuario),\n/* harmony export */   getLargurasByAlturaId: () => (/* binding */ getLargurasByAlturaId),\n/* harmony export */   getPacoteByLarguraId: () => (/* binding */ getPacoteByLarguraId),\n/* harmony export */   getPacoteByProdutoNome: () => (/* binding */ getPacoteByProdutoNome),\n/* harmony export */   getPacoteValido: () => (/* binding */ getPacoteValido),\n/* harmony export */   getPedidos: () => (/* binding */ getPedidos),\n/* harmony export */   getPedidosCliente: () => (/* binding */ getPedidosCliente),\n/* harmony export */   getProduto: () => (/* binding */ getProduto),\n/* harmony export */   getProdutos: () => (/* binding */ getProdutos),\n/* harmony export */   getRevendedoresComProduto: () => (/* binding */ getRevendedoresComProduto),\n/* harmony export */   getRevendedoresParaProdutos: () => (/* binding */ getRevendedoresParaProdutos),\n/* harmony export */   getTamanhos: () => (/* binding */ getTamanhos),\n/* harmony export */   getUserInfo: () => (/* binding */ getUserInfo),\n/* harmony export */   getUsuarioIdRevendedor: () => (/* binding */ getUsuarioIdRevendedor),\n/* harmony export */   limparCarrinhoUsuario: () => (/* binding */ limparCarrinhoUsuario),\n/* harmony export */   registrarMudancaStatus: () => (/* binding */ registrarMudancaStatus),\n/* harmony export */   removerItemCarrinho: () => (/* binding */ removerItemCarrinho),\n/* harmony export */   salvarCalculo: () => (/* binding */ salvarCalculo),\n/* harmony export */   salvarCalculoUsuario: () => (/* binding */ salvarCalculoUsuario)\n/* harmony export */ });\n/* harmony import */ var _supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./supabase */ \"(ssr)/./lib/supabase.ts\");\n/* harmony import */ var _lib_asaas__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/asaas */ \"(ssr)/./lib/asaas.ts\");\n\n\n// Funções para produtos\nasync function getProdutos() {\n    const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"produtos\").select(\"*\").order(\"created_at\", {\n        ascending: false\n    });\n    return {\n        data,\n        error\n    };\n}\nasync function getProduto(id) {\n    const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"produtos\").select(\"*\").eq(\"id\", id).single();\n    return {\n        data,\n        error\n    };\n}\n// Funções para cálculos\nasync function salvarCalculo(tamanhoRoda, altura, largura, resultado, cor) {\n    const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"calculos\").insert([\n        {\n            tamanho_roda: tamanhoRoda,\n            altura: altura,\n            largura: largura,\n            resultado: resultado,\n            cor: cor\n        }\n    ]).select();\n    return {\n        data,\n        error\n    };\n}\n// Nova função para salvar cálculos do usuário com limite de 10\nasync function salvarCalculoUsuario(userId, tamanho, altura, largura, pacote) {\n    try {\n        // 1. Verificar quantos cálculos o usuário já tem\n        const { data: calculos, error: contarError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"calculo_usuarios\").select(\"id, created_at\").eq(\"userid\", userId).order(\"created_at\", {\n            ascending: true\n        });\n        if (contarError) {\n            console.error(\"Erro ao contar cálculos do usuário:\", contarError);\n            return {\n                data: null,\n                error: contarError\n            };\n        }\n        // 2. Se já tiver 10 ou mais, excluir o mais antigo\n        if (calculos && calculos.length >= 10) {\n            const calculoMaisAntigo = calculos[0];\n            const { error: deleteError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"calculo_usuarios\").delete().eq(\"id\", calculoMaisAntigo.id);\n            if (deleteError) {\n                console.error(\"Erro ao excluir cálculo mais antigo:\", deleteError);\n                return {\n                    data: null,\n                    error: deleteError\n                };\n            }\n        }\n        // 3. Inserir o novo cálculo\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"calculo_usuarios\").insert([\n            {\n                userid: userId,\n                tamanho: tamanho,\n                altura: altura,\n                largura: largura,\n                pacote: pacote,\n                created_at: new Date()\n            }\n        ]).select();\n        if (error) {\n            console.error(\"Erro ao salvar cálculo do usuário:\", error);\n            return {\n                data: null,\n                error\n            };\n        }\n        return {\n            data,\n            error: null\n        };\n    } catch (error) {\n        console.error(\"Erro ao salvar cálculo do usuário:\", error);\n        return {\n            data: null,\n            error\n        };\n    }\n}\n// Função para obter os cálculos do usuário\nasync function getCalculosUsuario(userId) {\n    const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"calculo_usuarios\").select(\"*\").eq(\"userid\", userId).order(\"created_at\", {\n        ascending: false\n    });\n    return {\n        data,\n        error\n    };\n}\nasync function getCalculos(userId) {\n    const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"calculos\").select(\"*\").eq(\"user_id\", userId).order(\"created_at\", {\n        ascending: false\n    });\n    return {\n        data,\n        error\n    };\n}\n// Funções para pedidos\nasync function criarPedido(userId, items, total, tipoEntrega = \"retirada\", metodoPagamento = \"cartao\", dadosAdicionais = {}) {\n    try {\n        // Criar o pedido\n        const { data: pedido, error: pedidoError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"pedidos\").insert([\n            {\n                user_id: userId,\n                total: total,\n                tipo_entrega: tipoEntrega,\n                pagamento_tipo: metodoPagamento,\n                status: \"pendente\",\n                dados_adicionais: dadosAdicionais\n            }\n        ]).select().single();\n        if (pedidoError) throw pedidoError;\n        // Inserir os itens do pedido\n        const itens = items.map((item)=>({\n                pedido_id: pedido.id,\n                produto_nome: item.nome,\n                quantidade: item.quantidade,\n                preco_unitario: item.preco,\n                revendedor_id: item.revendedor_id\n            }));\n        const { error: itensError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"itens_pedido\").insert(itens);\n        if (itensError) throw itensError;\n        return {\n            data: pedido,\n            error: null\n        };\n    } catch (error) {\n        console.error(\"Erro ao criar pedido:\", error);\n        return {\n            data: null,\n            error\n        };\n    }\n}\n// Remover as funções getClienteByUsuarioId e garantirCliente que estavam criando uma tabela clientes desnecessária\n// Função para buscar pacote baseado no nome do produto\nasync function getPacoteByProdutoNome(produtoNome) {\n    try {\n        // Mapear nomes de produtos para pacotes\n        // Você pode ajustar essa lógica conforme sua regra de negócio\n        const mapeamentoProdutos = {\n            \"Microesferas Azul\": 1,\n            \"Microesferas Vermelha\": 2,\n            \"Microesferas Verde\": 3,\n            \"Microesferas Amarela\": 4,\n            \"Microesferas Preta\": 5,\n            \"Microesferas Branca\": 6\n        };\n        // Se existe um mapeamento direto, usar ele\n        if (mapeamentoProdutos[produtoNome]) {\n            return {\n                data: mapeamentoProdutos[produtoNome],\n                error: null\n            };\n        }\n        // Caso contrário, tentar buscar por nome similar\n        const { data: pacotes, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"pacotes\").select(\"id, nome, cor\").ilike(\"nome\", `%${produtoNome}%`).limit(1);\n        if (error) {\n            console.error(\"Erro ao buscar pacote por nome:\", error);\n            return {\n                data: 1,\n                error: null\n            }; // Fallback para ID 1\n        }\n        if (pacotes && pacotes.length > 0) {\n            return {\n                data: pacotes[0].id,\n                error: null\n            };\n        }\n        // Se não encontrou nada, tentar buscar por cor\n        const cores = [\n            \"azul\",\n            \"vermelha\",\n            \"verde\",\n            \"amarela\",\n            \"preta\",\n            \"branca\"\n        ];\n        for (const cor of cores){\n            if (produtoNome.toLowerCase().includes(cor)) {\n                const { data: pacotePorCor, error: errorCor } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"pacotes\").select(\"id\").ilike(\"cor\", `%${cor}%`).limit(1);\n                if (!errorCor && pacotePorCor && pacotePorCor.length > 0) {\n                    return {\n                        data: pacotePorCor[0].id,\n                        error: null\n                    };\n                }\n            }\n        }\n        // Fallback final\n        return {\n            data: 1,\n            error: null\n        };\n    } catch (error) {\n        console.error(\"Erro ao buscar pacote:\", error);\n        return {\n            data: 1,\n            error: null\n        };\n    }\n}\n// Função para buscar um pacote válido (por enquanto retorna o primeiro disponível)\nasync function getPacoteValido() {\n    try {\n        const { data: pacotes, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"pacotes\").select(\"id\").limit(1);\n        if (error) {\n            console.error(\"Erro ao buscar pacote:\", error);\n            return 1; // Fallback para ID 1\n        }\n        return pacotes && pacotes.length > 0 ? pacotes[0].id : 1;\n    } catch (error) {\n        console.error(\"Erro ao buscar pacote:\", error);\n        return 1; // Fallback para ID 1\n    }\n}\n// Função para registrar mudança de status no histórico\nasync function registrarMudancaStatus(pedidoId, statusAnterior, statusNovo, observacao, updatedBy) {\n    try {\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"pedido_historico_status\").insert([\n            {\n                pedido_id: pedidoId,\n                status_anterior: statusAnterior,\n                status_novo: statusNovo,\n                observacao: observacao,\n                updated_by: updatedBy\n            }\n        ]).select();\n        if (error) {\n            console.error(\"Erro ao registrar mudança de status:\", error);\n        }\n        return {\n            data,\n            error\n        };\n    } catch (error) {\n        console.error(\"Erro ao registrar mudança de status:\", error);\n        return {\n            data: null,\n            error\n        };\n    }\n}\n// Substituir a função criarPedidoNovo por esta versão corrigida:\nasync function criarPedidoNovo(userId, revendedorId, items, valorTotal, frete, tipoEntrega, metodoPagamento) {\n    try {\n        console.log(\"Iniciando criação do pedido para usuário:\", userId);\n        console.log(\"Revendedor ID:\", revendedorId);\n        console.log(\"Items:\", items);\n        console.log(\"Valor Total:\", valorTotal);\n        console.log(\"Frete:\", frete);\n        console.log(\"Tipo de Entrega:\", tipoEntrega);\n        console.log(\"Método de Pagamento:\", metodoPagamento);\n        // Converter userId para número\n        const clienteId = Number.parseInt(userId);\n        // Buscar o usuario_id do revendedor baseado no revendedor_id\n        const { data: revendedorUsuarioId, error: revendedorError } = await getUsuarioIdRevendedor(revendedorId);\n        if (revendedorError || !revendedorUsuarioId) {\n            throw new Error(\"Erro ao buscar revendedor: \" + (revendedorError?.message || \"Revendedor não encontrado\"));\n        }\n        console.log(\"Cliente ID:\", clienteId);\n        console.log(\"Revendedor ID:\", revendedorId);\n        console.log(\"Revendedor Usuario ID:\", revendedorUsuarioId);\n        // Gerar número do pedido único\n        const numeroPedido = `PED-${Date.now()}-${Math.random().toString(36).substr(2, 4).toUpperCase()}`;\n        // Definir status inicial baseado no tipo de entrega\n        const statusInicial = tipoEntrega === \"retirada\" ? \"aguardando_preparacao\" : \"aguardando_aceite\";\n        // Criar o pedido usando o schema correto\n        const { data: pedido, error: pedidoError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"pedidos\").insert([\n            {\n                cliente_id: clienteId,\n                revendedor_id: revendedorUsuarioId,\n                numero: numeroPedido,\n                frete: frete,\n                valor_total: valorTotal,\n                pagamento_tipo: metodoPagamento,\n                tipo_entrega: tipoEntrega,\n                status: \"pago\",\n                status_detalhado: statusInicial,\n                created_at: new Date().toISOString(),\n                updated_at: new Date().toISOString()\n            }\n        ]).select().single();\n        if (pedidoError) {\n            console.error(\"Erro ao criar pedido:\", pedidoError);\n            throw pedidoError;\n        }\n        const user = await getUserInfo(clienteId.toString());\n        console.log(\"User:\", user);\n        if (!user.data) {\n            throw new Error(\"Usuário não encontrado\");\n        }\n        if (!user.data?.nome || !user.data?.email || !user.data?.telefone || !user.data?.cpf) {\n            throw new Error(\"Dados do usuário incompletos\");\n        }\n        const cliente = await (0,_lib_asaas__WEBPACK_IMPORTED_MODULE_1__.createOrUpdateCustomer)({\n            name: user.data?.nome + \" \" + user.data?.sobrenome,\n            email: user.data?.email,\n            phone: user.data?.telefone,\n            mobilePhone: user.data?.telefone,\n            cpfCnpj: user.data?.cpf,\n            postalCode: user.data?.cep,\n            address: user.data?.rua,\n            addressNumber: user.data?.numero,\n            complement: user.data?.complemento,\n            province: user.data?.bairro,\n            city: user.data?.cidade,\n            state: user.data?.uf,\n            externalReference: user.data?.id.toString()\n        });\n        console.log(\"Cliente criado:\", cliente);\n        const pagamentoData = {\n            billingType: metodoPagamento,\n            customer: cliente.id,\n            value: Number(valorTotal) + Number(frete),\n            dueDate: \"2025-07-29\",\n            externalReference: pedido.id.toString(),\n            description: `Pedido #${pedido.id}`\n        };\n        if (metodoPagamento === \"CREDIT_CARD\") {\n            pagamentoData.creditCard = {\n                holderName: user.data.nome + \" \" + user.data.sobrenome,\n                number: \"4111111111111111\",\n                expiryMonth: \"12\",\n                expiryYear: \"2025\",\n                ccv: \"123\"\n            };\n            pagamentoData.installmentCount = 1;\n            pagamentoData.totalValue = Number(valorTotal) + Number(frete);\n            pagamentoData.installmentValue = Number(valorTotal) + Number(frete);\n            pagamentoData.discount = {\n                value: 0,\n                dueDateLimitDays: 0,\n                type: \"FIXED\"\n            };\n            pagamentoData.interest = {\n                value: 0\n            };\n            pagamentoData.fine = {\n                value: 0\n            };\n            pagamentoData.creditCardHolderInfo = {\n                name: user.data.nome + \" \" + user.data.sobrenome,\n                email: user.data.email,\n                cpfCnpj: user.data.cpf,\n                postalCode: user.data.cep,\n                addressNumber: user.data.numero,\n                addressComplement: user.data.complemento || \"\",\n                phone: user.data.telefone,\n                mobilePhone: user.data.telefone\n            };\n            pagamentoData.remoteIp = \"127.0.0.1\";\n        }\n        const pagamento = await (0,_lib_asaas__WEBPACK_IMPORTED_MODULE_1__.createPayment)(pagamentoData);\n        console.log(\"Pagamento criado:\", pagamento);\n        if (!pagamento.id) {\n            throw new Error(\"Erro ao criar pagamento no Asaas\");\n        }\n        let dadosPagamento = null;\n        if (metodoPagamento === \"PIX\" || metodoPagamento === \"BOLETO\") {\n            dadosPagamento = await (0,_lib_asaas__WEBPACK_IMPORTED_MODULE_1__.getPixQrCode)(pagamento.id);\n            console.log(\"QR Code PIX:\", dadosPagamento);\n        }\n        let pix = null;\n        let boleto = null;\n        if (dadosPagamento) {\n            pix = dadosPagamento.pix;\n            boleto = dadosPagamento.bankSlip;\n        }\n        // Registrar o status inicial no histórico\n        await registrarMudancaStatus(pedido.id, null, statusInicial, \"Pedido criado\", null);\n        // Preparar itens para inserção com pacote_id correto para cada item\n        const itensParaInserir = await Promise.all(items.map(async (item, index)=>{\n            // Buscar o pacote_id correto baseado no nome do produto\n            const { data: pacoteId } = await getPacoteByProdutoNome(item.nome);\n            const itemParaInserir = {\n                pedido_id: pedido.id,\n                pacote_id: pacoteId,\n                qtd: Number(item.quantidade) || 0,\n                valor_unitario: Number(item.preco) || 0\n            };\n            console.log(`Item ${index + 1} preparado:`, itemParaInserir);\n            console.log(`Produto: ${item.nome} -> Pacote ID: ${pacoteId}`);\n            return itemParaInserir;\n        }));\n        console.log(\"Todos os itens preparados:\", itensParaInserir);\n        // Inserir os itens do pedido\n        const { data: itensInseridos, error: itensError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"pedido_itens\").insert(itensParaInserir).select();\n        if (itensError) {\n            console.error(\"Erro detalhado ao inserir itens do pedido:\", itensError);\n            console.error(\"Dados que tentamos inserir:\", itensParaInserir);\n            throw itensError;\n        }\n        console.log(\"Itens inseridos com sucesso:\", itensInseridos);\n        console.log(\"Pagamento criado com sucesso:\", pix);\n        console.log(\"Pagamento criado com sucesso:\", boleto);\n        console.log(\"Pagamento criado com sucesso:\", pagamento.id);\n        return {\n            data: pedido,\n            pix,\n            boleto,\n            pagamentoId: pagamento.id,\n            error: null\n        };\n    } catch (error) {\n        console.error(\"Erro ao criar pedido:\", error);\n        return {\n            data: null,\n            error\n        };\n    }\n}\n// Função para atualizar status do pedido\nasync function atualizarStatusPedido(pedidoId, novoStatus, dataEstimada, observacoes, updatedBy) {\n    try {\n        // Primeiro, buscar o status atual\n        const { data: pedidoAtual, error: errorBusca } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"pedidos\").select(\"status_detalhado\").eq(\"id\", pedidoId).single();\n        if (errorBusca) {\n            throw errorBusca;\n        }\n        // Preparar dados para atualização\n        const dadosAtualizacao = {\n            status_detalhado: novoStatus,\n            updated_at: new Date().toISOString()\n        };\n        if (dataEstimada) {\n            dadosAtualizacao.data_estimada_entrega = dataEstimada;\n        }\n        if (observacoes) {\n            dadosAtualizacao.observacoes_revendedor = observacoes;\n        }\n        // Se o status for \"entregue\" ou \"retirado\", definir data real\n        if (novoStatus === \"entregue\" || novoStatus === \"retirado\") {\n            dadosAtualizacao.data_entrega_real = new Date().toISOString();\n        }\n        // Atualizar o pedido\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"pedidos\").update(dadosAtualizacao).eq(\"id\", pedidoId).select();\n        if (error) {\n            throw error;\n        }\n        // Registrar mudança no histórico\n        await registrarMudancaStatus(pedidoId, pedidoAtual.status_detalhado, novoStatus, observacoes, updatedBy);\n        return {\n            data,\n            error: null\n        };\n    } catch (error) {\n        console.error(\"Erro ao atualizar status do pedido:\", error);\n        return {\n            data: null,\n            error\n        };\n    }\n}\nasync function getPedidos(userId) {\n    const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"pedidos\").select(`\n      *,\n      itens_pedido:itens_pedido(\n        *,\n        produto:produtos(*)\n      )\n    `).eq(\"user_id\", userId).order(\"created_at\", {\n        ascending: false\n    });\n    return {\n        data,\n        error\n    };\n}\n// Substituir a função getPedidosCliente por esta versão corrigida:\nasync function getPedidosCliente(userId) {\n    try {\n        console.log(\"Buscando pedidos para usuário:\", userId);\n        // Converter userId para número\n        const clienteId = Number.parseInt(userId);\n        // Buscar pedidos usando o cliente_id diretamente\n        const { data: pedidos, error: pedidosError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"pedidos\").select(`\n        *,\n        pedido_itens:pedido_itens(\n          id,\n          pedido_id,\n          pacote_id,\n          qtd,\n          valor_unitario,\n          pacotes:pacotes(id, descricao, cor, imagem)\n        )\n      `).eq(\"cliente_id\", clienteId) // Corrigido: cliente_id em vez de client_id\n        .order(\"created_at\", {\n            ascending: false\n        });\n        console.log(\"Pedidos encontrados:\", pedidos?.length || 0);\n        if (pedidosError) {\n            console.error(\"Erro ao buscar pedidos:\", pedidosError);\n            throw pedidosError;\n        }\n        return {\n            data: pedidos || [],\n            error: null\n        };\n    } catch (error) {\n        console.error(\"Erro ao buscar pedidos do cliente:\", error);\n        return {\n            data: [],\n            error\n        };\n    }\n}\n// Função para buscar tamanhos de rodas disponíveis\nasync function getTamanhos() {\n    const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"tamanhos\").select(\"id, nome\").order(\"nome\", {\n        ascending: true\n    });\n    return {\n        data,\n        error\n    };\n}\n// Função para buscar alturas disponíveis com base no tamanho da roda\nasync function getAlturasByTamanhoId(tamanhoId) {\n    const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"alturas\").select(\"id, valor\").eq(\"tamanho_id\", tamanhoId).order(\"valor\", {\n        ascending: true\n    });\n    // Remover duplicatas baseado no valor\n    if (data && data.length > 0) {\n        const uniqueAlturas = data.reduce((acc, current)=>{\n            const exists = acc.find((item)=>item.valor === current.valor);\n            if (!exists) {\n                acc.push(current);\n            }\n            return acc;\n        }, []);\n        return {\n            data: uniqueAlturas,\n            error\n        };\n    }\n    return {\n        data,\n        error\n    };\n}\n// Função para buscar larguras based on altura_id\nasync function getLargurasByAlturaId(alturaId) {\n    console.log(\"🔍 Buscando larguras para alturaId:\", alturaId);\n    const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"larguras\").select(\"id, valor\").eq(\"altura_id\", alturaId).order(\"valor\", {\n        ascending: true\n    });\n    // Remover duplicatas baseado no valor\n    if (data && data.length > 0) {\n        const uniqueLarguras = data.reduce((acc, current)=>{\n            const exists = acc.find((item)=>item.valor === current.valor);\n            if (!exists) {\n                acc.push(current);\n            }\n            return acc;\n        }, []);\n        console.log(\"📏 Larguras únicas encontradas:\", {\n            data: uniqueLarguras,\n            error\n        });\n        return {\n            data: uniqueLarguras,\n            error\n        };\n    }\n    console.log(\"📏 Larguras encontradas:\", {\n        data,\n        error\n    });\n    return {\n        data,\n        error\n    };\n}\n// Função para buscar package details by largura_id\nasync function getPacoteByLarguraId(larguraId) {\n    try {\n        console.log(\"🔍 Buscando pacote para larguraId:\", larguraId);\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"pacotes\").select(\"*\").eq(\"largura_id\", larguraId).single();\n        console.log(\"📦 Resultado da busca:\", {\n            data,\n            error\n        });\n        if (error) {\n            console.error(\"❌ Erro ao buscar pacote por largura_id:\", error);\n            // Fallback: retornar um pacote padrão\n            return {\n                data: {\n                    id: 1,\n                    nome: \"LTP60\",\n                    cor: \"#4A4953\"\n                },\n                error: null\n            };\n        }\n        if (!data) {\n            console.log(\"Nenhum pacote encontrado para largura_id:\", larguraId);\n            // Fallback: retornar um pacote padrão\n            return {\n                data: {\n                    id: 1,\n                    nome: \"LTP60\",\n                    cor: \"#4A4953\"\n                },\n                error: null\n            };\n        }\n        // Ajustar dados se nome estiver null\n        const pacoteAjustado = {\n            id: data.id,\n            nome: data.nome || data.descricao || \"LTP60\",\n            cor: data.cor || \"#949698\"\n        };\n        return {\n            data: pacoteAjustado,\n            error: null\n        };\n    } catch (error) {\n        console.error(\"Erro ao buscar pacote:\", error);\n        // Fallback: retornar um pacote padrão\n        return {\n            data: {\n                id: 1,\n                nome: \"LTP60\",\n                cor: \"#4A4953\"\n            },\n            error: null\n        };\n    }\n}\n// ==================== FUNÇÕES DO CARRINHO ====================\n// Buscar carrinho do usuário\nasync function getCarrinhoUsuario(userId) {\n    const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"carrinho_usuarios\").select(\"*\").eq(\"user_id\", userId).order(\"created_at\", {\n        ascending: false\n    });\n    return {\n        data,\n        error\n    };\n}\n// Adicionar item ao carrinho\nasync function adicionarItemCarrinho(userId, produtoNome, quantidade = 5, imagem) {\n    // Ensure quantity is a multiple of 5 and at least 5\n    const adjustedQuantity = Math.max(Math.round(quantidade / 5) * 5, 5);\n    // Verificar se o item já existe no carrinho\n    const { data: itemExistente, error: errorBusca } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"carrinho_usuarios\").select(\"*\").eq(\"user_id\", userId).eq(\"produto_nome\", produtoNome).single();\n    if (errorBusca && errorBusca.code !== \"PGRST116\") {\n        // PGRST116 = No rows found (esperado se item não existe)\n        return {\n            data: null,\n            error: errorBusca\n        };\n    }\n    if (itemExistente) {\n        // Item já existe, adicionar 5 unidades\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"carrinho_usuarios\").update({\n            quantidade: itemExistente.quantidade + 5,\n            updated_at: new Date().toISOString()\n        }).eq(\"id\", itemExistente.id).select();\n        return {\n            data,\n            error\n        };\n    } else {\n        // Item não existe, criar novo com quantidade ajustada\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"carrinho_usuarios\").insert([\n            {\n                user_id: userId,\n                produto_nome: produtoNome,\n                quantidade: adjustedQuantity,\n                imagem: imagem\n            }\n        ]).select();\n        return {\n            data,\n            error\n        };\n    }\n}\n// Atualizar quantidade de item no carrinho\nasync function atualizarQuantidadeCarrinho(userId, produtoNome, quantidade) {\n    // Ensure quantity is a multiple of 5 and at least 5\n    const adjustedQuantity = Math.max(Math.round(quantidade / 5) * 5, 5);\n    const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"carrinho_usuarios\").update({\n        quantidade: adjustedQuantity,\n        updated_at: new Date().toISOString()\n    }).eq(\"user_id\", userId).eq(\"produto_nome\", produtoNome).select();\n    return {\n        data,\n        error\n    };\n}\n// Remover item do carrinho\nasync function removerItemCarrinho(userId, produtoNome) {\n    const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"carrinho_usuarios\").delete().eq(\"user_id\", userId).eq(\"produto_nome\", produtoNome);\n    return {\n        data,\n        error\n    };\n}\n// Limpar carrinho do usuário\nasync function limparCarrinhoUsuario(userId) {\n    const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"carrinho_usuarios\").delete().eq(\"user_id\", userId);\n    return {\n        data,\n        error\n    };\n}\n// Atualizar carrinho completo do usuário\nasync function atualizarCarrinhoUsuario(userId, items) {\n    try {\n        // Primeiro, limpar o carrinho atual\n        await limparCarrinhoUsuario(userId);\n        // Se não há itens, apenas retornar sucesso\n        if (!items || items.length === 0) {\n            return {\n                data: null,\n                error: null\n            };\n        }\n        // Inserir todos os novos itens\n        const itensParaInserir = items.map((item)=>({\n                user_id: userId,\n                produto_nome: item.nome,\n                quantidade: item.quantidade,\n                imagem: item.imagem,\n                created_at: new Date().toISOString()\n            }));\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"carrinho_usuarios\").insert(itensParaInserir).select();\n        return {\n            data,\n            error\n        };\n    } catch (error) {\n        console.error(\"Erro ao atualizar carrinho:\", error);\n        return {\n            data: null,\n            error\n        };\n    }\n}\n// ==================== FUNÇÕES DE REVENDEDORES E ESTOQUE ====================\n// Buscar revendedores que possuem um produto específico em estoque\nasync function getRevendedoresComProduto(produtoNome) {\n    // Usando JOIN manual em vez de relacionamento\n    const { data: estoque, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"revendedor_estoque\").select(`\n      id,\n      revendedor_id,\n      produto,\n      quantidade,\n      preco,\n      status\n    `).eq(\"produto\", produtoNome).gt(\"quantidade\", 0); // Apenas com estoque disponível\n    if (error) {\n        return {\n            data: null,\n            error\n        };\n    }\n    // Buscar informações dos revendedores\n    const revendedorIds = estoque?.map((item)=>item.revendedor_id) || [];\n    if (revendedorIds.length === 0) {\n        return {\n            data: [],\n            error: null\n        };\n    }\n    const { data: revendedores, error: revendedoresError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"revendedores\").select(`\n      id,\n      usuario_id,\n      loja,\n      cidade,\n      uf,\n      frete,\n      vendas,\n      status\n    `).in(\"id\", revendedorIds);\n    if (revendedoresError) {\n        return {\n            data: null,\n            error: revendedoresError\n        };\n    }\n    // Combinar os dados\n    const resultado = estoque?.map((item)=>{\n        const revendedor = revendedores?.find((r)=>r.id === item.revendedor_id);\n        return {\n            ...item,\n            revendedor: revendedor || null\n        };\n    }).filter((item)=>item.revendedor !== null) || [];\n    // Ordenar por preço\n    resultado.sort((a, b)=>a.preco - b.preco);\n    return {\n        data: resultado,\n        error: null\n    };\n}\n// Buscar revendedores para múltiplos produtos\nasync function getRevendedoresParaProdutos(produtoNomes) {\n    if (!produtoNomes.length) return {\n        data: {},\n        error: null\n    };\n    // Buscar todos os produtos de uma vez\n    const { data: estoque, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"revendedor_estoque\").select(`\n      id,\n      revendedor_id,\n      produto,\n      quantidade,\n      preco,\n      status\n    `).in(\"produto\", produtoNomes).gt(\"quantidade\", 0); // Apenas com estoque disponível\n    if (error) {\n        return {\n            data: {},\n            error\n        };\n    }\n    if (!estoque || estoque.length === 0) {\n        return {\n            data: {},\n            error: null\n        };\n    }\n    // Buscar informações dos revendedores\n    const revendedorIds = [\n        ...new Set(estoque.map((item)=>item.revendedor_id))\n    ];\n    const { data: revendedores, error: revendedoresError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"revendedores\").select(`\n      id,\n      usuario_id,\n      loja,\n      cidade,\n      uf,\n      frete,\n      vendas,\n      status\n    `).in(\"id\", revendedorIds);\n    if (revendedoresError) {\n        return {\n            data: {},\n            error: revendedoresError\n        };\n    }\n    // Combinar os dados e agrupar por produto\n    const produtosAgrupados = {};\n    produtoNomes.forEach((produtoNome)=>{\n        const produtoEstoque = estoque.filter((item)=>item.produto === produtoNome).map((item)=>{\n            const revendedor = revendedores?.find((r)=>r.id === item.revendedor_id);\n            return revendedor ? {\n                ...item,\n                revendedor\n            } : null;\n        }).filter((item)=>item !== null);\n        // Ordenar por preço\n        produtoEstoque.sort((a, b)=>a.preco - b.preco);\n        produtosAgrupados[produtoNome] = produtoEstoque;\n    });\n    return {\n        data: produtosAgrupados,\n        error: null\n    };\n}\n// Buscar informações do usuário\nasync function getUserInfo(userId) {\n    const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"usuarios\").select(\"id, nome, sobrenome, email, cpf, telefone, cidade, uf, cep, rua, bairro, complemento, numero\").eq(\"id\", userId).single();\n    return {\n        data,\n        error\n    };\n}\n// Função para buscar usuario_id do revendedor baseado no revendedor_id\nasync function getUsuarioIdRevendedor(revendedorId) {\n    try {\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"revendedores\").select(\"usuario_id\").eq(\"id\", revendedorId).single();\n        if (error) {\n            console.error(\"Erro ao buscar usuario_id do revendedor:\", error);\n            return {\n                data: null,\n                error\n            };\n        }\n        return {\n            data: data.usuario_id,\n            error: null\n        };\n    } catch (error) {\n        console.error(\"Erro ao buscar usuario_id do revendedor:\", error);\n        return {\n            data: null,\n            error\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./lib/database.ts\n");

/***/ }),

/***/ "(ssr)/./lib/supabase.ts":
/*!*************************!*\
  !*** ./lib/supabase.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   supabase: () => (/* binding */ supabase)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(ssr)/./node_modules/.pnpm/@supabase+supabase-js@2.53.0/node_modules/@supabase/supabase-js/dist/module/index.js\");\n\nconst supabaseUrl = \"https://djqueobbsqebtfnqysmt.supabase.co\";\nconst supabaseAnonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRqcXVlb2Jic3FlYnRmbnF5c210Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM2MjIyNzQsImV4cCI6MjA2OTE5ODI3NH0.8bUtQl__vruvkxUFcMEWB9IGNU8eZmDQEnDOs9J8i30\";\nif (!supabaseUrl || !supabaseAnonKey) {\n    throw new Error('Missing Supabase credentials. Please check your .env.local file.');\n}\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9saWIvc3VwYWJhc2UudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBb0Q7QUFFcEQsTUFBTUMsY0FBY0MsMENBQW9DO0FBQ3hELE1BQU1HLGtCQUFrQkgsa05BQXlDO0FBRWpFLElBQUksQ0FBQ0QsZUFBZSxDQUFDSSxpQkFBaUI7SUFDcEMsTUFBTSxJQUFJRSxNQUFNO0FBQ2xCO0FBRU8sTUFBTUMsV0FBV1IsbUVBQVlBLENBQUNDLGFBQWFJLGlCQUFnQiIsInNvdXJjZXMiOlsiQzpcXHhhbXBwXFxodGRvY3NcXEdJVEhVQlxcY2FycGx1c1xcbGliXFxzdXBhYmFzZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVDbGllbnQgfSBmcm9tIFwiQHN1cGFiYXNlL3N1cGFiYXNlLWpzXCJcclxuXHJcbmNvbnN0IHN1cGFiYXNlVXJsID0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfU1VQQUJBU0VfVVJMXHJcbmNvbnN0IHN1cGFiYXNlQW5vbktleSA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX0FOT05fS0VZXHJcblxyXG5pZiAoIXN1cGFiYXNlVXJsIHx8ICFzdXBhYmFzZUFub25LZXkpIHtcclxuICB0aHJvdyBuZXcgRXJyb3IoJ01pc3NpbmcgU3VwYWJhc2UgY3JlZGVudGlhbHMuIFBsZWFzZSBjaGVjayB5b3VyIC5lbnYubG9jYWwgZmlsZS4nKVxyXG59XHJcblxyXG5leHBvcnQgY29uc3Qgc3VwYWJhc2UgPSBjcmVhdGVDbGllbnQoc3VwYWJhc2VVcmwsIHN1cGFiYXNlQW5vbktleSlcclxuXHJcbi8vIFRpcG9zIHBhcmEgb3MgZGFkb3MgZG8gU3VwYWJhc2VcclxuZXhwb3J0IHR5cGUgVXNlciA9IHtcclxuICBpZDogc3RyaW5nXHJcbiAgZW1haWw6IHN0cmluZ1xyXG4gIG5vbWU6IHN0cmluZ1xyXG4gIHNvYnJlbm9tZTogc3RyaW5nXHJcbiAgdGVsZWZvbmU6IHN0cmluZ1xyXG4gIGNyZWF0ZWRfYXQ6IHN0cmluZ1xyXG59XHJcblxyXG5leHBvcnQgdHlwZSBQcm9kdXRvID0ge1xyXG4gIGlkOiBzdHJpbmdcclxuICBub21lOiBzdHJpbmdcclxuICBjYXRlZ29yaWE6IHN0cmluZ1xyXG4gIHByZWNvOiBudW1iZXJcclxuICBkZXNjcmljYW86IHN0cmluZ1xyXG4gIGltYWdlbV9wcmluY2lwYWw6IHN0cmluZ1xyXG4gIGltYWdlbnM6IHN0cmluZ1tdXHJcbiAgZXN0b3F1ZTogbnVtYmVyXHJcbiAgY3JlYXRlZF9hdDogc3RyaW5nXHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIFBlZGlkbyA9IHtcclxuICBpZDogc3RyaW5nXHJcbiAgdXNlcl9pZDogc3RyaW5nXHJcbiAgc3RhdHVzOiBzdHJpbmdcclxuICB0b3RhbDogbnVtYmVyXHJcbiAgY3JlYXRlZF9hdDogc3RyaW5nXHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIEl0ZW1QZWRpZG8gPSB7XHJcbiAgaWQ6IHN0cmluZ1xyXG4gIHBlZGlkb19pZDogc3RyaW5nXHJcbiAgcHJvZHV0b19pZDogc3RyaW5nXHJcbiAgcXVhbnRpZGFkZTogbnVtYmVyXHJcbiAgcHJlY29fdW5pdGFyaW86IG51bWJlclxyXG4gIGNyZWF0ZWRfYXQ6IHN0cmluZ1xyXG59XHJcblxyXG5leHBvcnQgdHlwZSBDYWxjdWxvUmVzdWx0YWRvID0ge1xyXG4gIGlkOiBzdHJpbmdcclxuICB0YW1hbmhvX3JvZGE6IHN0cmluZ1xyXG4gIGFsdHVyYTogc3RyaW5nXHJcbiAgbGFyZ3VyYTogc3RyaW5nXHJcbiAgcmVzdWx0YWRvOiBzdHJpbmdcclxuICBjcmVhdGVkX2F0OiBzdHJpbmdcclxufVxyXG4iXSwibmFtZXMiOlsiY3JlYXRlQ2xpZW50Iiwic3VwYWJhc2VVcmwiLCJwcm9jZXNzIiwiZW52IiwiTkVYVF9QVUJMSUNfU1VQQUJBU0VfVVJMIiwic3VwYWJhc2VBbm9uS2V5IiwiTkVYVF9QVUJMSUNfU1VQQUJBU0VfQU5PTl9LRVkiLCJFcnJvciIsInN1cGFiYXNlIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./lib/supabase.ts\n");

/***/ })

};
;